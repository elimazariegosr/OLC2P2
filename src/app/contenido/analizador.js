/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,41],$V1=[1,33],$V2=[1,37],$V3=[1,38],$V4=[1,42],$V5=[1,54],$V6=[1,55],$V7=[1,53],$V8=[1,46],$V9=[1,51],$Va=[1,50],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,52],$Vf=[2,5,47,48,49,134,143,144,146,150,152,153,154,155,158,159,160,164,183],$Vg=[1,60],$Vh=[1,61],$Vi=[1,62],$Vj=[1,78],$Vk=[1,76],$Vl=[1,77],$Vm=[1,74],$Vn=[1,75],$Vo=[1,84],$Vp=[1,94],$Vq=[2,5,14,47,48,49,109,123,134,137,143,144,146,150,152,153,154,155,158,159,160,161,162,164,181,182,183],$Vr=[14,138],$Vs=[2,5,14,47,48,49,134,143,144,146,150,152,153,154,155,158,159,160,164,183],$Vt=[1,110],$Vu=[1,106],$Vv=[1,108],$Vw=[1,109],$Vx=[1,117],$Vy=[1,116],$Vz=[1,118],$VA=[1,119],$VB=[1,120],$VC=[1,121],$VD=[1,122],$VE=[1,123],$VF=[1,124],$VG=[1,125],$VH=[1,126],$VI=[1,127],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[1,132],$VN=[1,133],$VO=[1,134],$VP=[1,135],$VQ=[1,136],$VR=[14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,130,131,132,133,138,149,166,167,185],$VS=[1,146],$VT=[14,167],$VU=[1,148],$VV=[1,155],$VW=[1,169],$VX=[1,179],$VY=[14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,138,166,167,185],$VZ=[1,215],$V_=[1,214],$V$=[1,217],$V01=[1,216],$V11=[1,218],$V21=[2,5,47,48,49,134,143,144,146,150,151,152,153,154,155,158,159,160,164,183],$V31=[1,240],$V41=[1,241],$V51=[14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,130,131,132,133,135,138,149,166,167,174,185],$V61=[1,250],$V71=[138,167],$V81=[14,109,110,115,116,117,118,119,120,121,122,124,138,166,167,185],$V91=[14,109,110,111,112,114,115,116,117,118,119,120,121,122,124,138,166,167,185],$Va1=[14,115,116,117,118,119,120,121,122,124,138,166,167,185],$Vb1=[14,119,120,121,122,124,138,166,167,185],$Vc1=[14,138,163,164,165,167,174],$Vd1=[163,185],$Ve1=[153,154,164],$Vf1=[14,138,166,167],$Vg1=[166,167],$Vh1=[14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,130,131,132,133,138,149,165,166,167,174,185],$Vi1=[165,174],$Vj1=[2,47,48,49,134,143,144,146,150,152,155,158,159,160,164,183],$Vk1=[164,167],$Vl1=[1,331];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCIAS":4,"EOF":5,"FUNCION":6,"FUNCTION":7,"ID":8,"PARAMETROS":9,"CONT_FUNCION":10,"DOS_PUNTOS":11,"TIPO":12,"ERROR_SINTACTIO":13,"TK_P_COMA":14,"LL_ABRE":15,"LISTA_CONT_FUNCION":16,"LL_CIERRA":17,"CONT_BLOQUE_FUNCION":18,"P_ABRE":19,"LISTA_PARAMETROS":20,"P_CIERRA":21,"COMA":22,"PARAMETRO":23,"C_ABRE":24,"C_CIERRA":25,"CONT_SENTENCIAS":26,"IMPRIMIR":27,"DECLARACION_VARIABLE":28,"ASiGNACION_VARIABLE":29,"SENTENCIA_IF":30,"SENTENCIA_WHILE":31,"SENTENCIA_DO_WHILE":32,"LLAMADA_FUNCION":33,"RETURN":34,"SENTENCIA_FOR":35,"SENTENCIA_FOR_1":36,"SENT_INC_DEC":37,"P_COMA":38,"SENTENCIA_SWITCH":39,"BREAK":40,"CONTINUE":41,"ARREGLO_PUSH":42,"ARREGLO_POP":43,"SD_ARREGLO":44,"DECLARACION_TYPE":45,"EXPRESION":46,"TK_RETURN":47,"TK_BREAK":48,"TK_CONTINUE":49,"TIPO_DECLARACION":50,"LISTA_DECLARACION":51,"DECLARACION":52,"IGUAL":53,"CONT_ARREGLO":54,"TIPO_ARREGLO":55,"TK_NEW":56,"ARRAY":57,"LET":58,"CONST":59,"ASIGNACION":60,"LISTA_ID":61,"TK_ARRAY":62,"LISTA_CONT_ARREGLO":63,"CONT_TIPO_ARREGLO":64,"PUNTO":65,"PUSH":66,"POP":67,"GD_ARREGLO":68,"LIST_D_ARREGLO":69,"TYPE":70,"LISTA_CONT_TYPE":71,"CONT_TYPE":72,"LISTA_ID_TYPE":73,"LISTA_ASIG_TYPE":74,"CONT_ASIG_TIPE":75,"SWITCH":76,"CONDICIONAL":77,"CONT_SWITCH":78,"LISTA_CASES":79,"CASES":80,"CASE":81,"CONT_CASE":82,"DEFAULT":83,"CONT_CONTROL":84,"IF":85,"ELSE":86,"WHILE":87,"DO":88,"FOR":89,"ASING_DEC_FOR":90,"CONT_FOR":91,"TIPO_FOR_1":92,"IN":93,"OF":94,"CONSOLE":95,"LOG":96,"CONT_IMPRIMIR":97,"NUMBER":98,"STRING":99,"VOID":100,"BOOLEAN":101,"ANY":102,"LLAMADA_FUNCION_EXP":103,"CONT_LLAMADA":104,"LISTA_CONT_LLAMADA":105,"INC_DEC":106,"MAS_MAS":107,"MENOS_MENOS":108,"TK_MENOS":109,"TK_MAS":110,"TK_MULTI":111,"TK_DIV":112,"TK_ELEVADO":113,"TK_MOD":114,"TK_MAYOR":115,"TK_MENOR":116,"TK_MAYOR_IGUAL":117,"TK_MENOR_IGUAL":118,"TK_IGUAL_IGUAL":119,"TK_DISTINTO":120,"TK_AND":121,"TK_OR":122,"TK_NOT":123,"TK_INTERROGACION":124,"CADENA":125,"NUMERO":126,"TRUE":127,"FALSE":128,"LENGTH":129,"TK_TOUPPERCASE":130,"TK_TOLOWERCASE":131,"TK_CHARAT":132,"TK_CONCAT":133,"TK_CONSOLE":134,"TK_PUNTO":135,"TK_LOG":136,"TK_P_ABRE":137,"TK_P_CIERRA":138,"TK_STRING":139,"TK_NUMBER":140,"TK_BOOLEAN":141,"TK_VOID":142,"TK_LET":143,"TK_CONST":144,"TK_ANY":145,"TK_TYPE":146,"TK_PUSH":147,"TK_POP":148,"TK_LENGTH":149,"TK_IF":150,"TK_ELSE":151,"TK_SWITCH":152,"TK_CASE":153,"TK_DEFAULT":154,"TK_FOR":155,"TK_OF":156,"TK_IN":157,"TK_WHILE":158,"TK_DO":159,"TK_FUNCTION":160,"TK_TRUE":161,"TK_FALSE":162,"TK_LL_ABRE":163,"TK_LL_CIERRA":164,"TK_C_ABRE":165,"TK_C_CIERRA":166,"TK_COMA":167,"MENOR":168,"MAYOR":169,"DISTINTO":170,"OR":171,"AND":172,"NOT":173,"TK_IGUAL":174,"MENOS":175,"ELEVADO":176,"MULTI":177,"DIV":178,"MOD":179,"MAS":180,"TK_CADENA":181,"TK_NUMERO":182,"TK_ID":183,"INTERROGACION":184,"TK_DOS_PUNTOS":185,"MENOR_IGUAL":186,"IGUAL_IGUAL":187,"MAYOR_IGUAL":188,"TK_MAS_MAS":189,"TK_MENOS_MENOS":190,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"TK_P_COMA",47:"TK_RETURN",48:"TK_BREAK",49:"TK_CONTINUE",56:"TK_NEW",62:"TK_ARRAY",109:"TK_MENOS",110:"TK_MAS",111:"TK_MULTI",112:"TK_DIV",113:"TK_ELEVADO",114:"TK_MOD",115:"TK_MAYOR",116:"TK_MENOR",117:"TK_MAYOR_IGUAL",118:"TK_MENOR_IGUAL",119:"TK_IGUAL_IGUAL",120:"TK_DISTINTO",121:"TK_AND",122:"TK_OR",123:"TK_NOT",124:"TK_INTERROGACION",130:"TK_TOUPPERCASE",131:"TK_TOLOWERCASE",132:"TK_CHARAT",133:"TK_CONCAT",134:"TK_CONSOLE",135:"TK_PUNTO",136:"TK_LOG",137:"TK_P_ABRE",138:"TK_P_CIERRA",139:"TK_STRING",140:"TK_NUMBER",141:"TK_BOOLEAN",142:"TK_VOID",143:"TK_LET",144:"TK_CONST",145:"TK_ANY",146:"TK_TYPE",147:"TK_PUSH",148:"TK_POP",149:"TK_LENGTH",150:"TK_IF",151:"TK_ELSE",152:"TK_SWITCH",153:"TK_CASE",154:"TK_DEFAULT",155:"TK_FOR",156:"TK_OF",157:"TK_IN",158:"TK_WHILE",159:"TK_DO",160:"TK_FUNCTION",161:"TK_TRUE",162:"TK_FALSE",163:"TK_LL_ABRE",164:"TK_LL_CIERRA",165:"TK_C_ABRE",166:"TK_C_CIERRA",167:"TK_COMA",174:"TK_IGUAL",181:"TK_CADENA",182:"TK_NUMERO",183:"TK_ID",185:"TK_DOS_PUNTOS",189:"TK_MAS_MAS",190:"TK_MENOS_MENOS"},
productions_: [0,[3,2],[3,1],[6,4],[6,6],[13,2],[10,3],[10,2],[16,2],[16,1],[18,1],[18,1],[9,3],[9,2],[20,3],[20,1],[23,1],[23,3],[23,5],[4,2],[4,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[26,1],[26,1],[26,1],[26,1],[26,2],[26,1],[26,1],[26,1],[34,2],[34,3],[34,1],[40,2],[40,1],[41,2],[41,1],[28,3],[51,3],[51,1],[52,3],[52,5],[52,5],[52,6],[52,10],[52,9],[50,1],[50,1],[29,2],[29,2],[60,3],[60,1],[60,3],[60,7],[60,3],[54,3],[54,2],[54,1],[63,3],[63,1],[55,2],[55,1],[64,2],[42,7],[42,7],[43,5],[68,2],[44,5],[69,4],[69,3],[45,7],[71,3],[71,1],[72,3],[61,3],[61,3],[73,3],[73,1],[74,3],[74,1],[75,3],[39,3],[78,3],[78,2],[79,2],[79,1],[80,4],[80,3],[80,3],[80,2],[82,1],[82,1],[30,3],[30,5],[30,5],[31,3],[32,5],[77,3],[84,3],[84,2],[35,9],[91,2],[91,3],[90,2],[90,1],[36,8],[92,1],[92,1],[27,5],[97,3],[97,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[33,2],[103,2],[104,2],[104,3],[105,3],[105,1],[106,2],[106,2],[37,1],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,5],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[46,4],[46,4],[46,5],[46,5],[46,1],[46,3],[95,1],[65,1],[96,1],[19,1],[21,1],[99,1],[98,1],[101,1],[100,1],[58,1],[59,1],[102,1],[70,1],[57,1],[66,1],[67,1],[129,1],[85,1],[86,1],[76,1],[81,1],[83,1],[89,1],[94,1],[93,1],[87,1],[88,1],[7,1],[127,1],[128,1],[15,1],[17,1],[24,1],[25,1],[22,1],[168,1],[38,1],[169,1],[170,1],[171,1],[172,1],[173,1],[53,1],[175,1],[176,1],[177,1],[178,1],[179,1],[180,1],[125,1],[126,1],[8,1],[184,1],[11,1],[186,1],[187,1],[188,1],[107,1],[108,1],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Arbol($$[$0-1], errores); return this.$;
break;
case 2:
this.$ = new Arbol([],errores); return this.$;
break;
case 3:
this.$ = new Funcion($$[$0-2],$$[$0-1],$$[$0],null,this._$.first_line,this._$.first_column);
break;
case 4:
this.$ = new Funcion($$[$0-4],$$[$0-3],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 5:

                        errores.push(new Errror("Sintactico", "Se encontro un error cerca del token: "
                        + token_error ,f_error, c_error));
break;
case 6: case 12: case 48: case 59: case 66: case 93: case 108: case 109: case 113: case 120: case 128: case 169:
this.$ = $$[$0-1];
break;
case 7: case 13: case 67: case 94: case 110: case 112: case 130:
this.$ = [];
break;
case 8:
 this.$ = $$[$0-1]; this.$ = unir_listas($$[$0], this.$);
break;
case 9:
this.$ = []; this.$ = unir_listas($$[$0], this.$);
break;
case 10: case 22: case 62: case 68: case 72: case 102: case 115: case 117: case 118: case 159: case 161: case 162:
this.$ = $$[$0];
break;
case 11: case 15: case 21: case 23: case 24: case 25: case 26: case 27: case 28: case 30: case 31: case 33: case 34: case 35: case 36: case 38: case 39: case 50: case 83: case 88: case 90: case 96:
this.$ = [$$[$0]];
break;
case 14: case 49:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 16:
 this.$ = new Declaracion("let",null, $$[$0], null, this._$.first_line,this._$.first_column);
break;
case 17:
 this.$ = new Declaracion("let",$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 19:
 this.$ = $$[$0-1]; this.$ = unir_listas($$[$0],this.$);
break;
case 20:
this.$ = []; this.$ = unir_listas($$[$0],this.$);
break;
case 29:
  this.$ = [$$[$0]];
break;
case 32: case 37: case 80:
this.$ = [$$[$0-1]];
break;
case 40:
this.$  = [];
break;
case 41:
this.$ = new Return(null, this._$.first_line,this._$.first_column);
break;
case 42:
this.$ = new Return($$[$0-1], this._$.first_line,this._$.first_column);
break;
case 43: case 45: case 47: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228:
this.$ = $$[$0]; token_error = $$[$0];f_error = this._$.first_line; c_error = this._$.first_column;
break;
case 44:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 46:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 51:
 this.$ = new Declaracion(tipo_dec,$$[$0], $$[$0-2], null,this._$.first_line,this._$.first_column);
break;
case 52:
 this.$ = new Declaracion(tipo_dec,$$[$0-2], $$[$0-4], $$[$0],this._$.first_line,this._$.first_column);
break;
case 53:
this.$ = new Arreglo_3d($$[$0-4],$$[$0-2], $$[$0], 0,null,0,0);
break;
case 54:
this.$ = new Arreglo_3d($$[$0-5],$$[$0-3], $$[$0], $$[$0-2],null,0,0);
break;
case 55:
this.$ = new Arreglo_3d($$[$0-9],$$[$0-7], [], $$[$0-6],$$[$0-1],0,0);
break;
case 56:
this.$ = new Arreglo_3d($$[$0-8],$$[$0-6], [], 1,$$[$0-1],0,0);
break;
case 57:
this.$ = $$[$0]; tipo_dec = $$[$0];
break;
case 58:
this.$ = $$[$0];tipo_dec = $$[$0];
break;
case 60:
this.$ =$$[$0-1];
break;
case 61:
this.$ = new Asignacion($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 63:
this.$ = new Set_type($$[$0-2], $$[$0], 0, 0);
break;
case 64:
this.$ = new Asig_Arreglo_3d($$[$0-6],[], $$[$0-1],0,0);
break;
case 65:
this.$ = new Asig_Arreglo_3d($$[$0-2],$$[$0],null,0,0);
break;
case 69: case 82: case 85: case 87: case 89: case 132:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 70:
this.$= [$$[$0]];
break;
case 71:
this.$ = $$[$0-1]; this.$ += $$[$0];
break;
case 73:
this.$ = 1;
break;
case 74: case 75:
this.$ = new Push($$[$0-6], $$[$0-2], 0,0);
break;
case 76:
this.$ = new Pop($$[$0-4], 0,0);
break;
case 77:
this.$ = new Get_Arreglo_3d($$[$0-1], $$[$0],0,0);
break;
case 78:
this.$ = new Set_Arreglo_3d($$[$0-4], $$[$0-3], $$[$0-1],0,0);
break;
case 79:
this.$ = $$[$0-3]; this.$.push($$[$0-1]);
break;
case 81:
this.$ = new Typo($$[$0-5],$$[$0-2],0,0);
break;
case 84: case 91:
this.$ = [$$[$0-2], $$[$0]];
break;
case 86:
this.$ = [$$[$0-2],$$[$0]];
break;
case 92:
this.$ = new Switch($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 95:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 97:
this.$ = new Case($$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Case($$[$0-1], [],this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Default($$[$0],this._$.first_line,this._$.first_column);
break;
case 100:
this.$ = new Default([],this._$.first_line,this._$.first_column);
break;
case 101: case 127:
 this.$ = $$[$0];
break;
case 103:
 this.$ = new If($$[$0-1], $$[$0], [],this._$.first_line,this._$.first_column);
break;
case 104:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0],this._$.first_line,this._$.first_column);
break;
case 105:
 this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]],this._$.first_line,this._$.first_column);
break;
case 106:
this.$ = new While($$[$0-1], $$[$0],this._$.first_line,this._$.first_column);
break;
case 107:
this.$ = new Do_while($$[$0-1], $$[$0-3], this._$.first_line,this._$.first_column);
break;
case 111:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0], this._$.first_line,this._$.first_column);
break;
case 114:
$$[$0].tipo_declaracion = $$[$0-1]; this.$ = $$[$0];
break;
case 116:
this.$ = new For_1($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column);
break;
case 119:
this.$ = new Imprimir($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 121:
this.$ = null;
break;
case 122:
 this.$ = new Tipo(tipos.NUMBER);
break;
case 123:
 this.$ = new Tipo(tipos.STRING);
break;
case 124:
 this.$ = new Tipo(tipos.VOID);
break;
case 125:
 this.$ = new Tipo(tipos.BOOLEAN);
break;
case 126:
 this.$ = new Tipo(tipos.ANY);
break;
case 129:
this.$ = new Llamada_funcion($$[$0-1],$$[$0], this._$.first_line,this._$.first_column);
break;
case 131:
this.$ = $$[$0-1]
break;
case 133:
 this.$ = [$$[$0]];
break;
case 134:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"+",this._$.first_line,this._$.first_column);
break;
case 135:
this.$ = new Aritmetica(new Identificador($$[$0-1],this._$.first_line, this._$.first_column),
                        new Primitivo(new Tipo(tipos.NUMBER), 1,this._$.first_line,this._$.first_column),"-",this._$.first_line,this._$.first_column);
break;
case 136:
this.$ = new Asignacion($$[$0].nodo_izquierdo.id,$$[$0],this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new Aritmetica($$[$0],null,$$[$0-1], this._$.first_line, this._$.first_column);
break;
case 138: case 139: case 140: case 141: case 142: case 143:
this.$ = new Aritmetica($$[$0-2],$$[$0],$$[$0-1], this._$.first_line, this._$.first_column);
break;
case 144: case 145: case 146: case 147: case 148: case 149:
this.$ = new Relacional($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 150: case 151:
this.$ = new Logica($$[$0-2],$$[$0],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 152:
this.$ = new Logica($$[$0],null,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 153:
 this.$ = new Ternario(new Tipo(tipos.BOOLEAN),$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 154:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,"").replace(/\'/g,""),this._$.first_line, this._$.first_column);
break;
case 155:
this.$ = new Primitivo(new Tipo(tipos.NUMBER), Number($$[$0]),this._$.first_line, this._$.first_column);
break;
case 156:
this.$ = new Primitivo(new Tipo(tipos.BOOLEAN), true,this._$.first_line, this._$.first_column);
break;
case 157:
this.$ = new Primitivo(new Tipo(tipos.BOOLEAN), false,this._$.first_line, this._$.first_column);
break;
case 158:
this.$  = $$[$0];
break;
case 160:
this.$ = new Llamada_type($$[$0],0,0);
break;
case 163:
this.$ = new Length($$[$0-1], 0,0);
break;
case 164:
this.$ = new To_Upper_Case($$[$0-3], 0,0);
break;
case 165:
this.$ = new To_Lower_Case($$[$0-3], 0,0);
break;
case 166:
this.$ = new Char_At($$[$0-4], $$[$0-1], 0,0);
break;
case 167:
this.$ = new Concat($$[$0-4], $$[$0-1], 0,0);
break;
case 168:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 229:
this.$ = $$[$0]; token_error = $$[$0]; f_error = this._$.first_line; c_error = this._$.first_column;
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:11,7:31,8:39,13:24,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,183:$Ve},{1:[3]},{2:$V0,5:[1,56],6:11,7:31,8:39,13:24,26:57,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,183:$Ve},{1:[2,2]},o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),o([2,5,47,48,49,134,143,144,146,150,152,153,154,155,158,159,160,164],[2,29],{38:58,46:59,125:63,126:64,127:65,128:66,103:67,106:68,61:69,43:70,68:71,8:72,19:73,14:$Vg,109:$Vh,123:$Vi,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve}),o($Vf,[2,30]),o($Vf,[2,31]),{14:$Vg,38:79},o($Vf,[2,33]),o($Vf,[2,34],{38:80,14:$Vg}),o($Vf,[2,35],{38:81,14:$Vg}),o($Vf,[2,36]),{14:$Vg,38:82},o($Vf,[2,38]),o($Vf,[2,39]),o($Vf,[2,40]),{65:83,135:$Vo},{8:87,51:85,52:86,183:$Ve},{14:$Vg,38:88},{19:90,77:89,137:$Vj},{19:90,77:91,137:$Vj},{15:93,84:92,163:$Vp},{8:95,183:$Ve},{14:$Vg,38:96},o($Vq,[2,43]),{19:97,137:$Vj},o($Vr,[2,136]),{19:90,77:98,137:$Vj},o($Vs,[2,45]),o($Vs,[2,47]),{19:107,24:105,53:101,65:99,69:100,104:102,107:103,108:104,135:$Vo,137:$Vj,165:$Vt,174:$Vu,189:$Vv,190:$Vw},{8:111,183:$Ve},{14:[1,112]},{135:[2,170]},{183:[2,57]},{183:[2,58]},{53:113,65:114,135:$Vo,174:$Vu},{137:[2,187]},{137:[2,195]},{163:[2,196]},{183:[2,197]},{137:[2,192]},{137:[2,189]},o([14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,130,131,132,133,135,137,138,149,156,157,163,164,165,166,167,174,185,189,190],[2,221]),{183:[2,182]},{183:[2,179]},{183:[2,180]},{1:[2,1]},o($Vf,[2,19]),o($Vq,[2,41]),{14:$Vg,38:115,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ},o($Vq,[2,206]),{8:72,19:73,43:70,46:137,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:138,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,154]),o($VR,[2,155]),o($VR,[2,156]),o($VR,[2,157]),o($VR,[2,158]),o($VR,[2,159]),o($VR,[2,160],{65:114,135:$Vo}),o($VR,[2,161]),o($VR,[2,162]),o($VR,[2,168],{104:102,107:103,108:104,24:105,19:107,65:139,69:140,135:$Vo,137:$Vj,165:$Vt,189:$Vv,190:$Vw}),{8:72,19:73,43:70,46:141,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,219]),o($VR,[2,220]),o($VR,[2,198]),o($VR,[2,199]),o([109,123,137,138,143,161,162,165,181,182,183],[2,173]),o($Vf,[2,32]),o($Vs,[2,44]),o($Vs,[2,46]),o($Vf,[2,37]),{96:142,136:[1,143]},o([136,147,148,183],[2,171]),{14:$Vg,22:145,38:144,167:$VS},o($VT,[2,50]),{11:147,185:$VU},o($Vs,[2,59]),{15:93,84:149,163:$Vp},{8:72,19:73,43:70,46:150,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{15:93,84:151,163:$Vp},{87:152,158:$Vb},{2:$V0,4:153,6:11,7:31,8:39,13:24,17:154,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},o([2,47,48,49,134,143,144,146,150,152,153,154,155,158,159,160,164,183],[2,200]),{9:156,19:157,137:$Vj},o($Vf,[2,128]),{8:161,29:160,37:162,58:159,60:27,61:45,90:158,106:35,143:$V5,183:$Ve},{15:164,78:163,163:$Vp},{8:167,66:165,67:166,147:[1,168],148:$VW,183:$Ve},{24:171,53:170,165:$Vt,174:$Vu},{8:72,19:73,24:175,43:70,46:172,54:174,56:[1,173],61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,129]),o($VR,[2,134]),o($VR,[2,135]),{8:72,19:73,43:70,46:176,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o([56,109,123,137,161,162,163,165,181,182,183],[2,212]),{8:72,19:73,21:177,43:70,46:180,61:69,68:71,103:67,105:178,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,138:$VX,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,227]),o($VR,[2,228]),o([109,123,137,161,162,165,166,181,182,183],[2,202]),{53:181,174:$Vu},o($Vf,[2,5]),{8:72,19:73,43:70,46:182,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:183,183:$Ve},o($Vq,[2,42]),{8:72,19:73,43:70,46:184,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:185,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:186,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:187,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:188,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:189,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:190,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:191,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:192,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:193,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:194,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:195,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:196,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:197,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:198,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,163]),{19:199,137:$Vj},{19:200,137:$Vj},{19:201,137:$Vj},{19:202,137:$Vj},o($VR,[2,186]),o($VY,[2,137],{129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($VY,[2,152],{129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),{8:167,67:166,148:$VW,183:$Ve},o($VR,[2,77],{24:171,165:$Vt}),{21:203,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},{19:205,97:204,137:$Vj},{137:[2,172]},o($Vf,[2,48]),{8:87,52:206,183:$Ve},o([109,123,137,161,162,165,181,182,183],[2,204]),{8:213,12:207,98:208,99:209,100:210,101:211,102:212,139:$VZ,140:$V_,141:$V$,142:$V01,145:$V11,183:$Ve},o([2,47,48,49,109,123,134,137,139,140,141,142,143,144,145,146,150,152,153,154,155,158,159,160,161,162,163,164,181,182,183],[2,223]),o($Vf,[2,103],{86:219,151:[1,220]}),{21:221,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},o($Vf,[2,106]),{19:90,77:222,137:$Vj},{2:$V0,6:11,7:31,8:39,13:24,17:223,26:57,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},o($V21,[2,110]),o([2,5,14,47,48,49,134,143,144,146,150,151,152,153,154,155,158,159,160,164,183],[2,201]),{10:224,11:225,15:226,163:$Vp,185:$VU},{8:230,20:227,21:228,23:229,138:$VX,183:$Ve},{14:$Vg,38:231},{8:232,52:233,183:$Ve},{14:[2,115]},{53:101,65:234,107:103,108:104,135:$Vo,174:$Vu,189:$Vv,190:$Vw},o($Vr,[2,62]),o($Vf,[2,92]),{17:236,79:235,80:237,81:238,83:239,153:$V31,154:$V41,164:$VV},{19:242,137:$Vj},{19:243,137:$Vj},o($V51,[2,86]),{137:[2,184]},{137:[2,185]},{8:72,19:73,43:70,46:244,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:245,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($Vr,[2,61],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),{62:[1,246]},o($Vr,[2,65]),{8:72,19:73,24:175,25:248,43:70,46:251,54:249,61:69,63:247,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,166:$V61,181:$Vm,182:$Vn,183:$Ve},{25:252,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ,166:$V61},o($VR,[2,130]),{21:253,22:254,138:$VX,167:$VS},o([14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,130,131,132,133,138,149,163,166,167,185],[2,174]),o($V71,[2,133],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),{15:255,163:$Vp},o($Vr,[2,63],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($V51,[2,85]),o($V81,[2,138],{129:131,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($V81,[2,139],{129:131,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($V91,[2,140],{129:131,113:$VB,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($V91,[2,141],{129:131,113:$VB,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($VY,[2,142],{129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($V91,[2,143],{129:131,113:$VB,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Va1,[2,144],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Va1,[2,145],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Va1,[2,146],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Va1,[2,147],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Vb1,[2,148],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Vb1,[2,149],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o([14,121,122,124,138,166,167,185],[2,150],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o([14,122,124,138,166,167,185],[2,151],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),{11:256,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ,185:$VU},{21:257,138:$VX},{21:258,138:$VX},{8:72,19:73,43:70,46:259,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:72,19:73,43:70,46:260,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,169]),{14:$Vg,38:261},{8:72,19:73,21:263,43:70,46:262,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,138:$VX,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VT,[2,49]),o($VT,[2,51],{53:264,55:265,64:266,24:267,165:$Vt,174:$Vu}),o($Vc1,[2,122]),o($Vc1,[2,123]),o($Vc1,[2,124]),o($Vc1,[2,125]),o($Vc1,[2,126]),o($Vc1,[2,127]),o($Vc1,[2,176]),o($Vc1,[2,175]),o($Vc1,[2,178]),o($Vc1,[2,177]),o($Vc1,[2,181]),{15:93,30:269,84:268,85:28,150:$V8,163:$Vp},o([150,163],[2,188]),o([14,163],[2,108]),{14:$Vg,38:270},o($V21,[2,109]),o($Vf,[2,3]),{8:213,12:271,98:208,99:209,100:210,101:211,102:212,139:$VZ,140:$V_,141:$V$,142:$V01,145:$V11,183:$Ve},{2:$V0,4:275,6:276,7:31,8:39,13:24,16:272,17:273,18:274,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},{21:277,22:278,138:$VX,167:$VS},o($Vd1,[2,13]),o($V71,[2,15]),o($V71,[2,16],{11:279,185:$VU}),{8:72,19:73,43:70,46:280,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{11:147,92:281,93:282,94:283,156:[1,285],157:[1,284],185:$VU},{14:[2,114]},{8:167,183:$Ve},{17:286,80:287,81:238,83:239,153:$V31,154:$V41,164:$VV},o($Vf,[2,94]),o($Ve1,[2,96]),{8:72,19:73,43:70,46:288,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{11:289,185:$VU},o([109,123,137,161,162,181,182,183],[2,190]),{185:[2,191]},{8:72,19:73,24:175,43:70,46:290,54:291,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,181:$Vm,182:$Vn,183:$Ve},{21:292,138:$VX},{14:$Vg,38:293,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ},{25:294,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ,166:$V61},{19:295,137:$Vj},{22:297,25:296,166:$V61,167:$VS},o($Vf1,[2,67]),o($Vg1,[2,70]),o($Vh1,[2,203]),o([14,166,167],[2,68],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($Vh1,[2,80]),o($VR,[2,131]),{8:72,19:73,43:70,46:298,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{8:301,71:299,72:300,183:$Ve},{8:72,19:73,43:70,46:302,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($VR,[2,164]),o($VR,[2,165]),{21:303,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},{21:304,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},o($Vf,[2,119]),{21:305,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},{14:[2,121]},{8:72,19:73,24:175,43:70,46:306,54:307,56:[1,308],61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,181:$Vm,182:$Vn,183:$Ve},{24:267,53:309,64:310,165:$Vt,174:$Vu},o($Vi1,[2,72]),{25:311,166:$V61},o($Vf,[2,104]),o($Vf,[2,105]),o($Vf,[2,107]),{10:312,15:226,163:$Vp},{2:$V0,4:275,6:276,7:31,8:39,13:24,17:313,18:314,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},o($Vf,[2,7]),o($Vj1,[2,9]),{2:$V0,6:11,7:31,8:39,13:24,26:57,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:[2,10],183:$Ve},o($Vj1,[2,11]),o($Vd1,[2,12]),{8:230,23:315,183:$Ve},{8:213,12:316,98:208,99:209,100:210,101:211,102:212,139:$VZ,140:$V_,141:$V$,142:$V01,145:$V11,183:$Ve},{14:$Vg,38:317,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ},{8:318,183:$Ve},{183:[2,117]},{183:[2,118]},{183:[2,194]},{183:[2,193]},o($Vf,[2,93]),o($Ve1,[2,95]),{11:319,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ,185:$VU},o($Ve1,[2,100],{26:4,27:5,28:6,29:7,30:8,31:9,32:10,6:11,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,13:24,95:25,50:26,60:27,85:28,87:29,88:30,7:31,103:32,89:34,106:35,76:36,8:39,70:40,58:43,59:44,61:45,15:93,82:320,84:321,4:322,2:$V0,47:$V1,48:$V2,49:$V3,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,163:$Vp,183:$Ve}),{21:323,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},{21:324,138:$VX},o($VR,[2,76]),o($Vf,[2,78]),o($Vh1,[2,79]),{8:72,19:73,43:70,46:325,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($Vf1,[2,66]),{8:72,19:73,24:175,43:70,46:251,54:326,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,181:$Vm,182:$Vn,183:$Ve},o($V71,[2,132],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),{17:327,22:328,164:$VV,167:$VS},o($Vk1,[2,83]),{11:329,185:$VU},o([14,138,166,167,185],[2,153],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($VR,[2,166]),o($VR,[2,167]),{14:[2,120]},o($VT,[2,52],{129:131,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,130:$VM,131:$VN,132:$VO,133:$VP,149:$VQ}),o($VT,[2,53]),{57:330,62:$Vl1},{8:72,19:73,24:175,43:70,46:251,54:332,56:[1,333],61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,165:$Vt,181:$Vm,182:$Vn,183:$Ve},o($Vi1,[2,71]),o($Vi1,[2,73]),o($Vf,[2,4]),o($Vf,[2,6]),o($Vj1,[2,8]),o($V71,[2,14]),o($V71,[2,17],{24:334,165:$Vt}),{8:161,37:162,60:335,61:45,106:35,183:$Ve},{21:336,138:$VX},o($Ve1,[2,98],{26:4,27:5,28:6,29:7,30:8,31:9,32:10,6:11,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,13:24,95:25,50:26,60:27,85:28,87:29,88:30,7:31,103:32,89:34,106:35,76:36,8:39,70:40,58:43,59:44,61:45,15:93,84:321,4:322,82:337,2:$V0,47:$V1,48:$V2,49:$V3,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,163:$Vp,183:$Ve}),o($Ve1,[2,99]),o($Ve1,[2,101]),o($Ve1,[2,102],{27:5,28:6,29:7,30:8,31:9,32:10,6:11,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,13:24,95:25,50:26,60:27,85:28,87:29,88:30,7:31,103:32,89:34,106:35,76:36,8:39,70:40,58:43,59:44,61:45,26:57,2:$V0,47:$V1,48:$V2,49:$V3,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,183:$Ve}),{14:$Vg,38:338},{14:$Vg,38:339},{21:340,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},o($Vg1,[2,69]),{14:$Vg,38:341},{8:301,72:342,183:$Ve},{8:213,12:343,98:208,99:209,100:210,101:211,102:212,139:$VZ,140:$V_,141:$V$,142:$V01,145:$V11,183:$Ve},{19:344,137:$Vj},{137:[2,183]},o($VT,[2,54]),{57:345,62:$Vl1},{25:346,166:$V61},{21:347,138:$VX},{15:349,91:348,163:$Vp},o($Ve1,[2,97]),o($Vf,[2,74]),o($Vf,[2,75]),o($Vr,[2,64]),o($Vf,[2,81]),o($Vk1,[2,82]),o($Vk1,[2,84]),{8:72,19:73,43:70,46:350,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},{19:351,137:$Vj},o($V71,[2,18]),{15:349,91:352,163:$Vp},o($Vf,[2,116]),{2:$V0,4:354,6:11,7:31,8:39,13:24,17:353,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},{21:355,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},{8:72,19:73,43:70,46:356,61:69,68:71,103:67,106:68,109:$Vh,123:$Vi,125:63,126:64,127:65,128:66,137:$Vj,161:$Vk,162:$Vl,181:$Vm,182:$Vn,183:$Ve},o($Vf,[2,111]),o($Vf,[2,112]),{2:$V0,6:11,7:31,8:39,13:24,17:357,26:57,27:5,28:6,29:7,30:8,31:9,32:10,33:12,34:13,35:14,36:15,37:16,39:17,40:18,41:19,42:20,43:21,44:22,45:23,47:$V1,48:$V2,49:$V3,50:26,58:43,59:44,60:27,61:45,70:40,76:36,85:28,87:29,88:30,89:34,95:25,103:32,106:35,134:$V4,143:$V5,144:$V6,146:$V7,150:$V8,152:$V9,155:$Va,158:$Vb,159:$Vc,160:$Vd,164:$VV,183:$Ve},o($VT,[2,56]),{21:358,109:$Vx,110:$Vy,111:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,124:$VL,129:131,130:$VM,131:$VN,132:$VO,133:$VP,138:$VX,149:$VQ},o($Vf,[2,113]),o($VT,[2,55])],
defaultActions: {3:[2,2],42:[2,170],43:[2,57],44:[2,58],46:[2,187],47:[2,195],48:[2,196],49:[2,197],50:[2,192],51:[2,189],53:[2,182],54:[2,179],55:[2,180],56:[2,1],143:[2,172],160:[2,115],168:[2,184],169:[2,185],233:[2,114],241:[2,191],263:[2,121],282:[2,117],283:[2,118],284:[2,194],285:[2,193],305:[2,120],331:[2,183]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    errores = [];
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Tipo, tipos} = require('./AST/Tipo'); 
    const {Arbol} = require('./AST/Arbol');
    const {Errror} = require('./AST/Errror'); 
    const {Primitivo} = require('./Expresiones/Primitivo');
    const {Aritmetica} = require('./Expresiones/Aritmetica');
    const {Relacional} = require('./Expresiones/Relacional');
    const {Logica} = require('./Expresiones/Logica');
    const {Return} = require('./Expresiones/Return');
    const {Continue} = require('./Expresiones/Continue');
    const {Break} = require('./Expresiones/Break');

    const {Identificador} = require('./Instrucciones/Identificador');
    const {Imprimir} = require('./Instrucciones/Imprimir');
    const {Declaracion} = require('./Instrucciones/Declaracion');
    const {Asignacion} = require('./Instrucciones/Asignacion');
    const {If} = require('./Instrucciones/If');
    const {While} = require('./Instrucciones/While');
    const {Do_while} = require('./Instrucciones/Do_while');
    const {Funcion} = require('./Instrucciones/Funcion');
    const {Llamada_funcion} = require('./Instrucciones/Llamada_funcion');
    const {Ternario} = require('./Instrucciones/Ternario');
    const {For} = require('./Instrucciones/For');
    const {Case} = require('./Instrucciones/Case');
    const {Default} = require('./Instrucciones/Default');
    const {Switch} = require('./Instrucciones/Switch');
    const {For_1} = require('./Instrucciones/For_1');
    const {Typo} = require('./Instrucciones/Typo');
    const {Type_object , Set_type} = require('./Instrucciones/Type_object');
    const {Llamada_type} = require('./Instrucciones/Llamada_type');
    const {Arreglo, Pop, Push, SD_Arreglo, GD_Arreglo} = require('./Instrucciones/Arreglo');
    const {Arreglo_3d, Get_Arreglo_3d, Set_Arreglo_3d, Asig_Arreglo_3d} = require('./Instrucciones/Arreglo_3d');
    const {Length} = require('./Instrucciones/Length');
    const {To_Upper_Case} = require('./Instrucciones/To_Upper_Case');
    const {To_Lower_Case} = require('./Instrucciones/To_Lower_Case');
    const {Char_At} = require('./Instrucciones/Char_At');
    const {Concat} = require('./Instrucciones/Concat');
    let tipo_dec = "";
    let errores = [];
    let token_error = "";
    let fila_error = 0;
    let columna_error = 0;
    function limpiar_lista(){
            errores = [];
    }
    function unir_listas(lista1, lista2){
        lista1.forEach(element => {
                lista2.push(element);  
        });
        return lista2;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* */
break;
case 1:/* */
break;
case 2:/* skip whitespace */
break;
case 3:/* */
break;
case 4:return 139;
break;
case 5:return 140;
break;
case 6:return 141;
break;
case 7:return 142;
break;
case 8:return 'TK_VAR';
break;
case 9:return 143;
break;
case 10:return 144;
break;
case 11:return 145;
break;
case 12:return 146;
break;
case 13:return 62;
break;
case 14:return 147;
break;
case 15:return 148;
break;
case 16:return 149;
break;
case 17:return 56;
break;
case 18:return 132;
break;
case 19:return 131;
break;
case 20:return 130;
break;
case 21:return 133;
break;
case 22:return 150;
break;
case 23:return 151;
break;
case 24:return 152;
break;
case 25:return 153;
break;
case 26:return 154;
break;
case 27:return 155;
break;
case 28:return 156;
break;
case 29:return 157;
break;
case 30:return 158;
break;
case 31:return 159;
break;
case 32:return 48;
break;
case 33:return 49;
break;
case 34:return 47;
break;
case 35:return 160;
break;
case 36:return 134;
break;
case 37:return 136;
break;
case 38:return 161;
break;
case 39:return 162;
break;
case 40:return 163; 
break;
case 41:return 164;
break;
case 42:return 137;
break;
case 43:return 138;
break;
case 44:return 165;
break;
case 45:return 166;
break;
case 46:return 167;
break;
case 47:return 124;
break;
case 48:return 185;
break;
case 49:return 14;
break;
case 50:return 118;
break;
case 51:return 116;
break;
case 52:return 119;
break;
case 53:return 117;
break;
case 54:return 115;
break;
case 55:return 120;
break;
case 56:return 122;
break;
case 57:return 121;
break;
case 58:return 123;
break;
case 59:return 174;
break;
case 60:return 'TK_MAS_IGUAL';
break;
case 61:return 'TK_MENOS_IGUAL';
break;
case 62:return 'TK_MULTI_IGUAL';
break;
case 63:return 'TK_DIV_IGUAL';
break;
case 64:return 'TK_MOD_IGUAL';
break;
case 65:return 189;
break;
case 66:return 110;
break;
case 67:return 190;
break;
case 68:return 109;
break;
case 69:return 113;
break;
case 70:return 111;
break;
case 71:return 112;
break;
case 72:return 114;
break;
case 73:return 135;
break;
case 74:return 'TK_NULO';
break;
case 75:return 183; /* Varying form */
break;
case 76:return 182;
break;
case 77:return 182;
break;
case 78:return 181;
break;
case 79:return 181;
break;
case 80:return 181;
break;
case 81:return 181;
break;
case 82:return 5;
break;
case 83:errores.push(new Errror("lexico", "No se reconoce el caracter: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:((\/\*)[^\*\/]*(\*\/)))/,/^(?:[ \\\t\r\n\f])/,/^(?:\s+)/,/^(?:(\/\/[^\n]*))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:any\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:\.length\b)/,/^(?:new\b)/,/^(?:\.charAt\b)/,/^(?:\.toLowerCase\b)/,/^(?:\.toUpperCase\b)/,/^(?:\.concat\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\.)/,/^(?:null\b)/,/^(?:[_a-zA-Z][a-zA-Z0-9_]*)/,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))+))/,/^(?:((0|([1-9])([0-9])*)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:'')/,/^(?:'([^']|(\\.))*')/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}